#ifndef LIGHT_H
#define LIGHT_H

#include "constants.h"

#include <vector>
#include <ctime>

#include "vec3.h"
#include "ray.h"

// Represents either a point light source or a square area light parallel to the XY plane.
// Later versions will support more shapes.
class Light{
 public:
    // Position of this point light, or the center of the area light.
    Vec3 pos;

    // The color of this light.
    Color color;

    // Set the size of the area light. Setting either the side length to 0 or the number of
    // samples to 1 will automatically make it a point light. Call this function on an area
    // light if the position is ever modified to update the area-light-specific information.
    void setArea(const float, const int);

    // Get the set of sample points, generated anew every time, of this light source. They
    // are generated by diving the area into a square grid and generating a sample point
    // at a random point inside each grid square.
    vector<Vec3> samplePoints(CRandomMersenne&) const;

    // Returns -1 if the given ray doesn't collide with this light, and a t-value otherwise.
    // Point lights always return -1.
    float collide(const Ray&) const;


 private:
    // Whether or not this is an area light.
    bool area_light;

    // How many samples on a side of the always-square area of an area light.
    int samples; 

    // Positional and traversal information for area lights.
    Vec3 x_vec, z_vec, corner, opposite_corner; 

    friend class boost::serialization::access;
    
    template<class Archive>
    void serialize(Archive &ar, const unsigned int version){
        ar & pos;
        ar & color;
        ar & area_light;
        ar & samples;
        ar & x_vec;
        ar & z_vec;
        ar & corner;
        ar & opposite_corner;
    }
};

#endif
